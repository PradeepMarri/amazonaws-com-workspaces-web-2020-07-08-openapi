package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"bytes"

	"github.com/amazon-workspaces-web/mcp-server/config"
	"github.com/amazon-workspaces-web/mcp-server/models"
	"github.com/mark3labs/mcp-go/mcp"
)

func UpdateusersettingsHandler(cfg *config.APIConfig) func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	return func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		args, ok := request.Params.Arguments.(map[string]any)
		if !ok {
			return mcp.NewToolResultError("Invalid arguments object"), nil
		}
		userSettingsArnVal, ok := args["userSettingsArn"]
		if !ok {
			return mcp.NewToolResultError("Missing required path parameter: userSettingsArn"), nil
		}
		userSettingsArn, ok := userSettingsArnVal.(string)
		if !ok {
			return mcp.NewToolResultError("Invalid path parameter: userSettingsArn"), nil
		}
		// Create properly typed request body using the generated schema
		var requestBody map[string]interface{}
		
		// Optimized: Single marshal/unmarshal with JSON tags handling field mapping
		if argsJSON, err := json.Marshal(args); err == nil {
			if err := json.Unmarshal(argsJSON, &requestBody); err != nil {
				return mcp.NewToolResultError(fmt.Sprintf("Failed to convert arguments to request type: %v", err)), nil
			}
		} else {
			return mcp.NewToolResultError(fmt.Sprintf("Failed to marshal arguments: %v", err)), nil
		}
		
		bodyBytes, err := json.Marshal(requestBody)
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Failed to encode request body", err), nil
		}
		url := fmt.Sprintf("%s/userSettings/%s", cfg.BaseURL, userSettingsArn)
		req, err := http.NewRequest("PATCH", url, bytes.NewBuffer(bodyBytes))
		req.Header.Set("Content-Type", "application/json")
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Failed to create request", err), nil
		}
		// Set authentication based on auth type
		// Handle multiple authentication parameters
		if cfg.BearerToken != "" {
			req.Header.Set("X-Amz-Security-Token", cfg.BearerToken)
		}
		req.Header.Set("Accept", "application/json")

		resp, err := http.DefaultClient.Do(req)
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Request failed", err), nil
		}
		defer resp.Body.Close()

		body, err := io.ReadAll(resp.Body)
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Failed to read response body", err), nil
		}

		if resp.StatusCode >= 400 {
			return mcp.NewToolResultError(fmt.Sprintf("API error: %s", body)), nil
		}
		// Use properly typed response
		var result models.UpdateUserSettingsResponse
		if err := json.Unmarshal(body, &result); err != nil {
			// Fallback to raw text if unmarshaling fails
			return mcp.NewToolResultText(string(body)), nil
		}

		prettyJSON, err := json.MarshalIndent(result, "", "  ")
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Failed to format JSON", err), nil
		}

		return mcp.NewToolResultText(string(prettyJSON)), nil
	}
}

func CreateUpdateusersettingsTool(cfg *config.APIConfig) models.Tool {
	tool := mcp.NewTool("patch_userSettings_userSettingsArn",
		mcp.WithDescription("Updates the user settings."),
		mcp.WithString("userSettingsArn", mcp.Required(), mcp.Description("The ARN of the user settings.")),
		mcp.WithString("clientToken", mcp.Description("Input parameter: <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>")),
		mcp.WithString("copyAllowed", mcp.Description("Input parameter: Specifies whether the user can copy text from the streaming session to the local device.")),
		mcp.WithNumber("disconnectTimeoutInMinutes", mcp.Description("Input parameter: The amount of time that a streaming session remains active after users disconnect.")),
		mcp.WithString("downloadAllowed", mcp.Description("Input parameter: Specifies whether the user can download files from the streaming session to the local device.")),
		mcp.WithNumber("idleDisconnectTimeoutInMinutes", mcp.Description("Input parameter: The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.")),
		mcp.WithString("pasteAllowed", mcp.Description("Input parameter: Specifies whether the user can paste text from the local device to the streaming session.")),
		mcp.WithString("printAllowed", mcp.Description("Input parameter: Specifies whether the user can print to the local device.")),
		mcp.WithString("uploadAllowed", mcp.Description("Input parameter: Specifies whether the user can upload files from the local device to the streaming session.")),
	)

	return models.Tool{
		Definition: tool,
		Handler:    UpdateusersettingsHandler(cfg),
	}
}
